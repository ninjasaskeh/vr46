datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(OPERATOR)
  department    String?
  phone         String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  weightRecords WeightRecord[]
  materials     Material[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  MARKETING
  OPERATOR
  ADMIN
  MANAGER
}

model Material {
  id        String         @id @default(cuid())
  name      String
  category  String
  supplier  String
  unitPrice Float
  unit      String
  stock     Float
  status    MaterialStatus @default(ACTIVE)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  createdBy String

  user          User           @relation(fields: [createdBy], references: [id])
  weightRecords WeightRecord[]
}

enum MaterialStatus {
  ACTIVE
  LOW_STOCK
  OUT_OF_STOCK
  INACTIVE
}

model WeightRecord {
  id            String       @id @default(cuid())
  materialId    String
  grossWeight   Float
  tareWeight    Float
  netWeight     Float
  vehicleNumber String
  operatorId    String
  status        WeightStatus @default(PENDING)
  entryDate     DateTime
  weighingDate  DateTime?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  material Material @relation(fields: [materialId], references: [id])
  operator User     @relation(fields: [operatorId], references: [id])
}

enum WeightStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Supplier {
  id            String         @id @default(cuid())
  name          String
  contactPerson String
  phone         String
  email         String         @unique
  address       String
  materials     String
  status        SupplierStatus @default(ACTIVE)
  rating        Float          @default(0)
  totalOrders   Int            @default(0)
  lastOrder     DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

enum SupplierStatus {
  ACTIVE
  INACTIVE
  PENDING
}

model Notification {
  id        String               @id @default(cuid())
  title     String
  message   String
  type      NotificationType
  category  String
  priority  NotificationPriority @default(NORMAL)
  isRead    Boolean              @default(false)
  userId    String?
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
}

enum NotificationType {
  INFO
  WARNING
  ERROR
  SUCCESS
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
}
